
Sprof was developed by MÃ¡rcio Jales (marcio.dojcosta@gmail.com), at UFRN (Universidade Federal do Rio Grande do Norte), as part of the undegraduate thesis in computer engineering.
Date: 09/12/2016.

This document describes the essentials about the sprof toolsuite. It consists of:
- "sprof" binary executable;
- "sprof_instr.sh" shell script ;
- and the "libsprof.so" shared library.

It is organised as shown below:

SECTION 1 - WHAT IS SPROF
SECTION 2 - HOW SPROF WORKS
SECTION 3 - INSTRUMENTING THE CODE
SECTION 4 - AUTOMATIC INSTRUMENTATION
SECTION 5 - CONFIGURING THE SPROF EXECUTION
SECTION 6 - EXECUTING SPROF
SECTION 7 - GENERAL INFORMATIONS

The entire suite is licensed under the GPL v3.0.

------------------------------------------------------------------------------------

SECTION 1 - WHAT IS SPROF

Sprof executes an user application (called "target") repeatedly, for the same size of problem, but different number of threads, so that it is able to calculate the speedup of the target. The user must, first of all, instrument its application using specific functions provided by the Sprof library "libsprof.so". If he/she wants it to be made automatically, there is an executable script called "sprof_instr.sh" that may perform such task in certain conditions. 

The tool suite aims two things, basically:

First, a test plataform to create a profile about the speedup of multithread applications. This is acomplished by the binary executable called "sprof".
Second, to instrument the source-code of these applications automatically. This is acomplished by the shell script called "sprof_instr.sh".

The tool was tested for OpenMP and Pthreads application.

------------------------------------------------------------------------------------

SECTION 2 - HOW SPROF WORKS

The user must instrument its target application that he/she wishes to be measured. In order to do so, he/she must use the library provided, named "libsprof.so".

Next, the user executes "sprof", passing, as arguments, the binary executable of the target application and all its necessary arguments. To configure how "sprof" will perform the tests, he/she must configure the file "sprof_exec.conf". There, it will be informed how many tests will be made and the number of threads that will be used.

------------------------------------------------------------------------------------

SECTION 3 - INSTRUMENTING THE CODE

In order to execute correctly, the functions provides by sprof library must be placed accordingly by the user (or using "sprof_instr.sh". This will be explained on the next section). 

There are 5 functions available for this purpose:

	1 - sprof_start: does not return and does not receive any arguments. It marks the beginning of the parallel area to be measured.

	2 - sprof_stop: does not return and does not receive any arguments. It marks the end of the parallel area to be measured.

	When using Pthreads, it is possibly to determine the behavior of the threads very especificaly. Threads can be created and terminated whenever the programmer wants, in contrast to OpenMP, on that threads are created and terminated in blocks. Beacuse of that, sprof library provides also both functions below.

	3 - sprof_pthstart: does not return, but receives one argument of "pthread_t" type, whose value consists of the thread ID that the information gathering is going to start. This function should be used instead of "sprof_start" when there is a more fine-grained measurement involving pthreads, as explained previously.

	4 - sprof_pthstop: does not return, but receives one argument of "pthread_t" type, whose value consists of the thread ID that that the information gathering is going to finish. This function should be used instead of "sprof_stop" when there is a more fine-grained measurement involving pthreads, as explained previously as well.

	5 - sprof_thrnum: sprof may use the target application's arguments to configure how many threads it will be executed. If this is not possible, the user must place the "sprof_thrnum" function in the code. It does not return and receives one argument, a pointer to integer (*int), that must be the variable in the program that holds the number of threads to use. Thus, the use of "sprof_thrnum" function may be optional.

	It is important to highlight that all the intrumentation works only OUTSIDE the parallel areas. Sprof does not handle race conditions and other problems that arises inside parallel implementations.

------------------------------------------------------------------------------------

SECTION 4 - AUTOMATIC INSTRUMENTATION

Sometimes, looking into a code and placing instrumentation can be tricky. With that in mind, the shell script "sprof_instr.sh" was created as a first trial to automatically instrument code using the sprof library. Currently, it inserts only "sprof_start" and "sprof_stop" functions in OpenMP directives that start with "pragma omp parallel".

To use 




	
